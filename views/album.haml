:css
  #title, #desc, #zip, .section {
    font-family: '#{@album.font_family}', sans-serif;
  }

- if @album.config(:zip)
  %a#zip{:href => "/#{@album.name}/zip"}
    .icon-cloud-download
    = t.download.all

#title
  = h @album.config(:title)
  #desc= h @album.config(:desc)

.container
  .wrapper
    - @photos.each do |photo|
      - if @album.config(:section) and not @album.config(:section)[photo.id].nil?
        = "</div>"
        .section= @album.config(:section)[photo.id]
        = "<div class='wrapper'>"
      %a.item{:name => photo.id, :href => preview(photo), "data-size" => "#{photo.size(:preview).x}x#{photo.size(:preview).y}"}<>
        %img{:class => 'b-lazy', :src => 'gfx/transparent.gif', "data-src" => thumb(photo), :width => photo.size(:thumb).x, :height => photo.size(:thumb).y}

:plain
  <!-- Root element of PhotoSwipe. Must have class pswp. -->
  <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

      <!-- Background of PhotoSwipe.
           It's a separate element as animating opacity is faster than rgba(). -->
      <div class="pswp__bg"></div>

      <!-- Slides wrapper with overflow:hidden. -->
      <div class="pswp__scroll-wrap">

          <!-- Container that holds slides.
              PhotoSwipe keeps only 3 of them in the DOM to save memory.
              Don't modify these 3 pswp__item elements, data is added later on. -->
          <div class="pswp__container">
              <div class="pswp__item"></div>
              <div class="pswp__item"></div>
              <div class="pswp__item"></div>
          </div>

          <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
          <div class="pswp__ui pswp__ui--hidden">

              <div class="pswp__top-bar">

                  <!--  Controls are self-explanatory. Order can be changed. -->

                  <div class="pswp__counter"></div>

                  <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                  <button class="pswp__button pswp__button--share" title="Share"></button>

                  <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                  <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                  <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
                  <!-- element will get class pswp__preloader--active when preloader is running -->
                  <div class="pswp__preloader">
                      <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                          <div class="pswp__preloader__donut"></div>
                        </div>
                      </div>
                  </div>
              </div>

              <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                  <div class="pswp__share-tooltip"></div>
              </div>

              <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
              </button>

              <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
              </button>

              <div class="pswp__caption">
                  <div class="pswp__caption__center"></div>
              </div>

          </div>

      </div>

  </div>


:javascript

  var galleryElement = document.querySelector('.container');

  // parse picture index from URL (#&pid=1&gid=2)
  var parseHash = function() {
      var hash = window.location.hash.substring(1),
      params = {};

      var vars = hash.split('&');
      for (var i = 0; i < vars.length; i++) {
          if(!vars[i]) {
              continue;
          }
          var pair = vars[i].split('=');
          if(pair.length < 2) {
              continue;
          }
          params[pair[0]] = pair[1];
      }

      if(params.pid) {
          params.pid = parseInt(params.pid, 10);
      }

      return params;
  };

  // parse slide data (url, title, size ...) from DOM elements
  // (children of gallerySelector)
  var parseThumbnailElements = function(el) {
      var thumbElements = document.querySelectorAll('.item'),
          numNodes = thumbElements.length,
          items = [],
          linkEl,
          size,
          item;

      for(var i = 0; i < numNodes; i++) {

          linkEl = thumbElements[i]; // <a> element

          // include only element nodes
          if(linkEl.nodeType !== 1) {
              continue;
          }

          size = linkEl.getAttribute('data-size').split('x');

          // create slide object
          item = {
              src: linkEl.getAttribute('href'),
              w: parseInt(size[0], 10),
              h: parseInt(size[1], 10)
          };


          if(linkEl.children.length > 0) {
              // <img> thumbnail element, retrieving thumbnail url
              item.msrc = linkEl.children[0].getAttribute('src');
          }

          item.el = linkEl; // save link to element for getThumbBoundsFn
          items.push(item);
      }

      return items;
  };

  // find nearest parent element
  var closest = function closest(el, fn) {
      return el && ( fn(el) ? el : closest(el.parentNode, fn) );
  };

  // triggers when user clicks on thumbnail
  var onThumbnailsClick = function(e) {
      e = e || window.event;
      e.preventDefault ? e.preventDefault() : e.returnValue = false;

      var eTarget = e.target || e.srcElement;

      // find root element of slide
      var clickedListItem = closest(eTarget, function(el) {
          return (el.tagName == 'A');
      });


      if(!clickedListItem) {
          return;
      }

      // find index of clicked item by looping through all child nodes
      // alternatively, you may define index via data- attribute
      var clickedGallery = clickedListItem.parentNode,
          childNodes = clickedListItem.parentNode.childNodes,
          numChildNodes = childNodes.length,
          nodeIndex = 0,
          index;

      for (var i = 0; i < numChildNodes; i++) {
          if(childNodes[i].nodeType !== 1) {
              continue;
          }

          if(childNodes[i] === clickedListItem) {
              index = nodeIndex;
              break;
          }
          nodeIndex++;
      }


      if(index >= 0) {
          // open PhotoSwipe if valid index found
          openPhotoSwipe(index);
      }
      return false;
  };

  var openPhotoSwipe = function(index, disableAnimation, fromURL) {
      var pswpElement = document.querySelectorAll('.pswp')[0],
          gallery,
          options,
          items;

      items = parseThumbnailElements(galleryElement);

      options = {
          galleryPIDs: false,

          getThumbBoundsFn: function(index) {
              // See Options -> getThumbBoundsFn section of documentation for more info
              var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                  pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                  rect = thumbnail.getBoundingClientRect();

              return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
          }

      };

      // PhotoSwipe opened from URL
      if(fromURL) {
          if(options.galleryPIDs) {
              // parse real index when custom PIDs are used
              // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
              for(var j = 0; j < items.length; j++) {
                  if(items[j].pid == index) {
                      options.index = j;
                      break;
                  }
              }
          } else {
              // in URL indexes start from 1
              options.index = parseInt(index, 10) - 1;
          }
      } else {
          options.index = parseInt(index, 10);
      }

      // exit if index not found
      if( isNaN(options.index) ) {
          return;
      }

      if(disableAnimation) {
          options.showAnimationDuration = 0;
      }

      // Pass data to PhotoSwipe and initialize it
      gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
      gallery.init();
  };

  var initPhotoSwipeFromDOM = function(gallerySelector) {
      galleryElement.onclick = onThumbnailsClick;

      // Parse URL and open gallery if it contains #id=3
      var hashData = parseHash();
      if(hashData.pid) {
        openPhotoSwipe(hashData.pid, true, true);
      }
  };

  // HorizontalGrid
  /*
  var wrappers = document.querySelectorAll('.wrapper');
  for (var i = 0; i < wrappers.length; i++) {
    HorizontalGridPacking(wrappers[i], {
      padding: 5,
      height: #{@album.config(:thumb)}
    });
  }
  */

  $(".wrapper").justifiedGallery({
    rowHeight: #{@album.config(:thumb)} / 2,
    margins: 5,
    waitThumbnailsLoad: false
  });

  // Blazy
  new Blazy();
  // PhotoSwipe
  initPhotoSwipeFromDOM();
